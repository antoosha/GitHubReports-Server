openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /users/{userID}:
    get:
      tags:
        - user-controller
      summary: Find user by ID
      description: Return a single user.
      operationId: getUser
      parameters:
        - name: userID
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    put:
      tags:
        - user-controller
      operationId: updateUser
      summary: Update user by ID
      description: Update an existing user by ID
      parameters:
        - name: userID
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      summary: Delete user by ID
      parameters:
        - name: userID
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
    patch:
      tags:
        - user-controller
      operationId: updateUser1
      summary: Delete user by ID
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserUpdateDTO'
        '404':
          description: User not found
  /tags/{tagID}:
    get:
      tags:
        - tag-controller
      operationId: getTag
      summary: Fing tag by ID
      description: Return a single tag.
      parameters:
        - name: tagID
          in: path
          description: ID of tag to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'appliction/json':
              schema:
                $ref: '#/components/schemas/TagDTO'
    put:
      tags:
        - tag-controller
      operationId: updateTag
      summary: Update tag by ID
      description: Update an existing tag by ID
      parameters:
        - name: tagID
          in: path
          description: ID of tag that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TagDTO'
        '404':
          description: Tag not found
    delete:
      tags:
        - tag-controller
      operationId: deleteTag
      summary: Delete tag by ID
      description: Delete an existing tag by ID
      parameters:
        - name: tagID
          in: path
          description: ID of tag that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Tag not found
  /statistics/{statisticID}:
    get:
      tags:
        - statistic-controller
      operationId: getStatistic
      summary: Find statistic by ID
      description: Return a single statistic by ID
      parameters:
        - name: statisticID
          in: path
          description: ID of statistic
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StatisticDTO'
        '404':
          description: Statistic not found
    put:
      tags:
        - statistic-controller
      operationId: updateStatistic
      summary: Update statistic by ID
      description: Update an existing statistic by ID
      parameters:
        - name: statisticID
          in: path
          description: ID of statistic
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StatisticDTO'
        '404':
          description: Statistic not found
    delete:
      tags:
        - statistic-controller
      operationId: deleteStatistic
      summary: Delete Statistic
      description: Delete an existing statistic by ID
      parameters:
        - name: statisticID
          in: path
          description: ID of statistic
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Statistic not found
  /statisticTypes/{id}:
    get:
      tags:
        - statistic-type-controller
      operationId: getstatisticType
      summary: Find statistic type by ID
      description: Return a single statistic type by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatisticTypeDTO'
        '404':
          description: Statistic type not found
    put:
      tags:
        - statistic-type-controller
      operationId: updateStatisticType
      summary: Update statistic type by ID
      description: Update an existing Statistic type by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticTypeDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatisticTypeDTO'
        '404':
          description: Statistic type not found
    delete:
      tags:
        - statistic-type-controller
      operationId: deleteStatisticType
      summary: Delete statistic type by ID
      description: Delete an existing Statistic type by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Statistic type not found
  /roles/{roleName}:
    put:
      tags:
        - role-controller
      operationId: updateRole
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDTO'
  /repositories/{id}/{tokenAuth}:
    put:
      tags:
        - repository-controller
      operationId: updateRepository
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tokenAuth
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
  /repositories/synchronize/{id}/{tokenAuth}:
    put:
      tags:
        - repository-controller
      operationId: synchronize
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tokenAuth
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
  /projects/{projectID}:
    get:
      tags:
        - project-controller
      operationId: getProject
      summary: Find project by ID
      description: Return a single project by ID
      parameters:
        - name: projectID
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        '404':
          description: Project not found
    put:
      tags:
        - project-controller
      operationId: updateProject
      summary: Update project by ID
      description: Update an existing project by ID
      parameters:
        - name: projectID
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        '404':
          description: Project not found
    delete:
      tags:
        - project-controller
      operationId: deleteProject
      summary: Delete project by ID
      description: Delete an existing project by ID
      parameters:
        - name: projectID
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Project not found
  /commits/{commitsID}:
    get:
      tags:
        - commit-controller
      operationId: getCommit
      summary: Find commit by ID
      description: Return a single commit by ID
      parameters:
        - name: commitsID
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '404':
          description: Commit not found
    put:
      tags:
        - commit-controller
      operationId: updateCommit
      summary: Update commit by ID
      description: Update an existing commit by ID
      parameters:
        - name: commitsID
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '404':
          description: Commit not found
    delete:
      tags:
        - commit-controller
      operationId: deleteCommit
      summary: Delete commit by ID
      description: Delete an existing commit by ID
      parameters:
        - name: commitsID
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Commit not found
  /comments/{commentID}:
    get:
      tags:
        - comment-controller
      operationId: getComment
      summary: Find comment by ID
      description: Return a single comment by ID
      parameters:
        - name: commentID
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommentDTO'
        '404':
          description: Comment not found
    put:
      tags:
        - comment-controller
      operationId: updateComment
      summary: Update comment by ID
      description: Update an existing comment by ID
      parameters:
        - name: commentID
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommentDTO'
        '404':
          description: Comment not found
    delete:
      tags:
        - comment-controller
      operationId: deleteComment
      summary: Delete comment by ID
      description: Delete an existing comment by ID
      parameters:
        - name: commentID
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Comment not found
  /users:
    get:
      tags:
        - user-controller
      operationId: getUsers
      summary: Get all users
      description: Returns all users.
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
        - user-controller
      operationId: createUser
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /users/{username}/save/photo:
    post:
      tags:
        - user-controller
      operationId: saveUserPhoto
      summary: Upload user's photo
      description: Find user by username and save photo
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - photo
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
  /tags:
    get:
      tags:
        - tag-controller
      operationId: getTags
      summary: Get all tags
      description: Return all tags
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDTO'
    post:
      tags:
        - tag-controller
      operationId: createTag
      summary: Add new tag to the project
      description: Create new tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TagDTO'
  /statistics:
    get:
      tags:
        - statistic-controller
      operationId: getStatistics
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticDTO'
    post:
      tags:
        - statistic-controller
      operationId: createStatistic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatisticDTO'
  /statisticTypes:
    get:
      tags:
        - statistic-type-controller
      operationId: getStatisticTypes
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticTypeDTO'
    post:
      tags:
        - statistic-type-controller
      operationId: createStatisticType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticTypeDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatisticTypeDTO'
  /roles:
    get:
      tags:
        - role-controller
      operationId: getRoles
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
    post:
      tags:
        - role-controller
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleDTO'
  /repositories/{tokenAuth}:
    post:
      tags:
        - repository-controller
      operationId: createRepository
      parameters:
        - name: tokenAuth
          description: Authorization token from an github account
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
  /projects:
    get:
      tags:
        - project-controller
      operationId: getProjects
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
    post:
      tags:
        - project-controller
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProjectDTO'
  /commits:
    get:
      tags:
        - commit-controller
      operationId: getCommits
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommitDTO'
    post:
      tags:
        - commit-controller
      operationId: createCommit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommitDTO'
  /comments:
    get:
      tags:
        - comment-controller
      operationId: getComments
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDTO'
    post:
      tags:
        - comment-controller
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentDTO'
  /users/{userID}/projects:
    get:
      tags:
        - user-controller
      operationId: getUserProjects
      summary: Find user projects
      description: Find all user ptojects by userID
      parameters:
        - name: userID
          in: path
          description: ID of User
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '404':
          description: User not found
  /users/{userID}/photo:
    get:
      tags:
        - user-controller
      operationId: getImageWithMediaType
      summary: Get user profile photo
      description: Return a user profile photo
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: array
                items:
                  type: string
                  format: byte
        '404':
          description: User not found
  /users/username/{username}:
    get:
      tags:
        - user-controller
      operationId: getUserByUsername
      summary: Find user by username
      description: Return a single user by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
  /users/token/refresh:
    get:
      tags:
        - user-controller
      operationId: refreshToken
      summary: Get new accsess token
      description: Return a new access token
      responses:
        '200':
          description: OK
  /roles/{roleID}:
    get:
      tags:
        - role-controller
      operationId: getRole
      summary: Find role by ID
      description: Return a single role by ID
      parameters:
        - name: roleID
          in: path
          description: ID of role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '404':
          description: Role not found
    delete:
      tags:
        - role-controller
      operationId: deleteRole
      summary: Delete role by ID
      description: Delete an existing role by ID
      parameters:
        - name: roleID
          in: path
          description: ID of role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Role not found
  /repositories:
    get:
      tags:
        - repository-controller
      operationId: getRepositories
      summary: Get all repositories
      description: Get all repositories
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryDTO'
  /repositories/{repositoryID}:
    get:
      tags:
        - repository-controller
      operationId: getRepository
      summary: Find repository by ID
      description: Return a single repository by ID
      parameters:
        - name: repositoryID
          in: path
          description: ID of repository
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
        '404':
          description: Repository not found
    delete:
      tags:
        - repository-controller
      operationId: deleteRepository
      summary: Delete repository by ID
      description: Delete an existing repository by ID
      parameters:
        - name: repositoryID
          in: path
          description: ID of repository
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Repository not found
components:
  schemas:
    UserDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 26
        username:
          type: string
          example: username
        email:
          type: string
          example: email@gmail.com
        password:
          type: string
          example: ???DELETE THIS FIELD???
        pathToFileWithPhoto:
          type: string
          example: /somePath
        commentsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [ 555, 1001, 1520 ]
        projectsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [ 5, 10, 12 ]
        createdProjectsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [ 5, 10 ]
        statisticsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [ 12, 15, 99 ]
        rolesIDs:
          type: array
          items:
            type: string
          example: [ ROLE_ADMIN, ROLE_DEVELOPER ]
    TagDTO:
      type: object
      properties:
        tagID:
          type: integer
          format: int64
          example: 26
        tagName:
          type: string
          example: TODO
        projectID:
          type: integer
          format: int64
          example: 12
        commitsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [244, 255, 300]
    StatisticDTO:
      type: object
      properties:
        statisticId:
          type: integer
          format: int64
          example: 4
        createdDate:
          type: string
          format: date-time
        statisticTypeName:
          type: string
          example: Best employees
        authorID:
          type: integer
          format: int64
          example: 13
        projectID:
          type: integer
          format: int64
          example: 12
        pathToFileWithGeneratedStat:
          type: string
          example: /somePath
    StatisticTypeDTO:
      type: object
      properties:
        statisticName:
          type: string
          example: Best employees
        statisticsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [1, 3, 8]
    RoleDTO:
      type: object
      properties:
        roleName:
          type: string
          example: ROLE_ADMIN
        usersIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [1, 5, 10]
    RepositoryUpdateDTO:
      type: object
      properties:
        repositoryID:
          type: integer
          format: int64
        repositoryName:
          type: string
        repositoryURL:
          type: string
        projectID:
          type: integer
          format: int64
    RepositoryDTO:
      type: object
      properties:
        repositoryID:
          type: integer
          format: int64
          example: 1
        repositoryName:
          type: string
          example: Some name
        repositoryURL:
          type: string
          example: githubUsername/repositoryName
        projectID:
          type: integer
          format: int64
          example: 13
        commitsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [228, 229, 230, 231, 232, 233]
    ProjectDTO:
      type: object
      properties:
        projectID:
          type: integer
          format: int64
          example: 13
        createdDate:
          type: string
          format: date-time
        projectName:
          type: string
          example: Some Name
        description:
          type: string
          example: My first project...
        authorID:
          type: integer
          format: int64
          example: 1
        repositoriesIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [1, 12]
        statisticsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [1, 2]
        usersIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [4, 26]
        tagsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [17, 43, 44]
    CommitDTO:
      type: object
      properties:
        commitID:
          type: integer
          format: int64
          example: 228
        createdDate:
          type: string
          format: date-time
        hashHubID:
          type: string
          example: 37c2af
        loginAuthor:
          type: string
          example: login
        description:
          type: string
          example: My first commit
        repositoryID:
          type: integer
          format: int64
          example: 12
        tagsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [26, 28, 45]
        commentsIDs:
          type: array
          items:
            type: integer
            format: int64
          example: [322, 323, 333, 592]
        deleted:
          type: boolean
          example: false
    CommentDTO:
      type: object
      properties:
        commentID:
          type: integer
          format: int64
          example: 1
        text:
          type: string
          example: Good job, Oleg
        createdDate:
          type: string
          format: date-time
        authorID:
          type: integer
          format: int64
          example: 26
        authorUsername:
          type: string
          example: username
        commitID:
          type: integer
          format: int64
          example: 322
    UserUpdateDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 13
        username:
          type: string
          example: username
        email:
          type: string
          example: email@gmail.com
        pathToFileWithPhoto:
          type: string
          example: ?????????????????????
        commentsIDs:
          type: array
          example: [124, 53, 322, 324]
          items:
            type: integer
            format: int64
        projectsIDs:
          type: array
          example: [2, 12]
          items:
            type: integer
            format: int64
        createdProjectsIDs:
          type: array
          example: [12]
          items:
            type: integer
            format: int64
        statisticsIDs:
          type: array
          example: [23]
          items:
            type: integer
            format: int64
        rolesIDs:
          type: array
          example: [ROLE_ADMIN, ROLE_ANALYST]
          items:
            type: string

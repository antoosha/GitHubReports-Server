openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v1.0.0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  ######### USERS ############
  /users:
    get:
      tags:
        - user-controller
      operationId: getUsers
      summary: Get all users
      description: Returns all users.
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSlimDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - user-controller
      operationId: createUser
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{username}:
    get:
      tags:
        - user-controller
      summary: Find user by username
      description: Return a single user.
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user-controller
      operationId: updateUser
      summary: Update user by username
      description: Update an existing user by username
      parameters:
        - name: username
          in: path
          description: username of user to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      summary: Delete user by username
      parameters:
        - name: username
          in: path
          description: username of user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{username}/passwords:
    put:
      tags:
        - user-controller
      operationId: changePassword
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: username
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordDTO'
        required: true

      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /users/{username}/roles:
    post:
      tags:
        - user-controller
      operationId: addRole
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roleName
          in: query
          required: true
          schema:
            type: string
            example: ROLE_DEVELOPER
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user-controller
      operationId: deleteRole
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roleName
          in: query
          required: true
          schema:
            type: string
            example: ROLE_DEVELOPER
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{username}/photos:
    get:
      tags:
        - user-controller
      operationId: getImageWithMediaType
      summary: Get user profile photo
      description: Return a user profile photo
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - user-controller
      operationId: saveUserPhoto
      summary: Upload user's photo
      description: Find user by username and save photo
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - photo
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /users/{username}/projects:
    get:
      tags:
        - user-controller
      operationId: getUserProjects
      summary: Find user projects
      description: Find all user ptojects by userID
      parameters:
        - name: username
          in: path
          description: ID of User
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/token/refresh:
    get:
      tags:
        - user-controller
      operationId: refreshToken
      summary: Get new accsess token
      description: Return a new access token # TODO improve security - not to send tokens
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### TAGS #########
  /tags/{id}:
    get:
      tags:
        - tag-controller
      operationId: getTag
      summary: Fing tag by ID
      description: Return a single tag.
      parameters:
        - name: id
          in: path
          description: ID of tag to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'appliction/json':
              schema:
                $ref: '#/components/schemas/TagDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - tag-controller
      operationId: updateTag
      summary: Update tag by ID
      description: Update an existing tag by ID
      parameters:
        - name: id
          in: path
          description: ID of tag that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TagDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - tag-controller
      operationId: deleteTag
      summary: Delete tag by ID
      description: Delete an existing tag by ID
      parameters:
        - name: id
          in: path
          description: ID of tag that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### STATISTICS #########
  /statistics:
    get:
      tags:
        - statistic-controller
      operationId: getStatistics
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /statistics/{id}:
    get:
      tags:
        - statistic-controller
      operationId: getStatistic
      summary: Find statistic by ID
      description: Return a single statistic by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StatisticDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - statistic-controller
      operationId: deleteStatistic
      summary: Delete Statistic
      description: Delete an existing statistic by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### statisticTypes #########
  /statisticTypes:
    get:
      tags:
        - statistic-type-controller
      operationId: getStatisticTypes
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticTypeSlimDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /statisticTypes/{id}:
    get:
      tags:
        - statistic-type-controller
      operationId: getStatisticType
      summary: Find statistic type by ID
      description: Return a single statistic type by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StatisticTypeDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - statistic-type-controller
      operationId: updateStatisticType
      summary: Update statistic type by ID
      description: Update an existing Statistic type by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticTypeSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StatisticTypeDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - statistic-type-controller
      operationId: deleteStatisticType
      summary: Delete statistic type by ID
      description: Delete an existing Statistic type by ID
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### Project #########
  /projects:
    get:
      tags:
        - project-controller
      operationId: getProjects
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project-controller
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{id}:
    get:
      tags:
        - project-controller
      operationId: getProject
      summary: Find project by ID
      description: Return a single project by ID
      parameters:
        - name: id
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - project-controller
      operationId: updateProject
      summary: Update project by ID
      description: Update an existing project by ID
      parameters:
        - name: id
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project-controller
      operationId: deleteProject
      summary: Delete project by ID
      description: Delete an existing project by ID
      parameters:
        - name: id
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{id}/repositories:
    post:
      tags:
        - project-controller
      operationId: createRepository
      parameters:
        - name: id
          description: ID of project
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: githubToken
          description: Authorization token from github account # TODO improve security - not to send tokens
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{id}/tags:
    post:
      tags:
        - project-controller
      operationId: createTag
      summary: Add new tag to the project
      description: Create new tag
      parameters:
        - name: id
          in: path
          description: ID of project for which the tag will be created
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TagDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{id}/statistics:
    post:
      tags:
        - project-controller
      operationId: createStatistic
      parameters:
        - name: id
          in: path
          description: ID of statistic type
          required: true
          schema:
            type: integer
            format: int64
        - name: statisticType
          in: query
          description: ID of statistic type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StatisticDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### Roles #########
  /roles:
    get:
      tags:
        - role-controller
      operationId: getRoles
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleSlimDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{roleName}:
    get:
      tags:
        - role-controller
      operationId: getRole
      summary: Find role by role name
      description: Return a single role by name
      parameters:
        - name: roleName
          in: path
          description: Name of role
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### Commits #########
  /commits/{id}:
    get:
      tags:
        - commit-controller
      operationId: getCommit
      summary: Find commit by ID
      description: Return a single commit by ID
      parameters:
        - name: id
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /commits/{id}/comments:
    post:
      tags:
        - commit-controller
      operationId: addComment
      parameters:
        - name: id
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /commits/{id}/comments/{commentId}:
    delete:
      tags:
        - commit-controller
      operationId: deleteComment
      summary: Delete comment by ID
      description: Delete an existing comment by ID
      parameters:
        - name: id
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /commits/{id}/tags/{tagId}:
    post:
      tags:
        - commit-controller
      operationId: addTag
      parameters:
        - name: id
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: ID of tag
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - commit-controller
      operationId: removeTag
      parameters:
        - name: id
          in: path
          description: ID of commit
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: ID of tag
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommitDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### Comment #########
  /comments/{id}:
    get:
      tags:
        - comment-controller
      operationId: getComment
      summary: Find comment by ID
      description: Return a single comment by ID
      parameters:
        - name: id
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommentDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - comment-controller
      operationId: updateComment
      summary: Update comment by ID
      description: Update an existing comment by ID
      parameters:
        - name: id
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommentSlimDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  ######### Repository #########
  /repositories/{id}:
    get:
      tags:
        - repository-controller
      operationId: getRepository
      summary: Find repository by ID
      description: Return a single repository by ID
      parameters:
        - name: id
          in: path
          description: ID of repository
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - repository-controller
      operationId: updateRepository
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryUpdateSlimDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - repository-controller
      operationId: deleteRepository
      summary: Delete repository by ID
      description: Delete an existing repository by ID
      parameters:
        - name: id
          in: path
          description: ID of repository
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /repositories/{id}/commits:
    get:
      tags:
        - repository-controller
      operationId: getRepositoryCommits
      summary: Find repository commits by ID
      parameters:
        - name: id
          in: path
          description: ID of repository
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommitSlimDTO'
        '404':
          description: Repository not found

  /repositories/synchronize/{id}/{tokenAuth}:
    put:
      tags:
        - repository-controller
      operationId: synchronize
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tokenAuth # TODO improve security - not to send tokens
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RepositoryDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BadRequest:
      description: Indicates a nonspecific client error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GithubReportsException'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GithubReportsException'
    Forbidden:
      description: Forbidden request - sent when the client either provided invalid credentials or client does not have access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GithubReportsException'
    Conflict:
      description: The request could not be processed because of conflict in the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GithubReportsException'
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GithubReportsException'
  schemas:
    GithubReportsException:
      type: object
      properties:
        type:
          type: string
          example: Wrong input parameter
        message:
          type: string
          example: Wrong parameter for endpoint /example/endpoint, wrong endpointId value.

    UserDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 26
        username:
          type: string
          example: username
        email:
          type: string
          example: email@gmail.com
        profilePhotoURL:
          type: string
          example: localhost:8080/users/26/photo
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentSlimDTO'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSlimDTO'
        createdProjects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSlimDTO'
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/StatisticSlimDTO'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleSlimDTO'

    UserCreateSlimDTO:
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          example: PaSsWoRD1234
        email:
          type: string
          example: email@gmail.com

    UserUpdateSlimDTO:
      type: object
      properties:
        username:
          type: string
          example: username
        email:
          type: string
          example: email@gmail.com

    TagDTO:
      type: object
      properties:
        tagId:
          type: integer
          format: int64
          example: 26
        tagName:
          type: string
          example: TODO
        project:
          $ref: '#/components/schemas/ProjectSlimDTO'
        commits:
          type: array
          items:
            $ref: '#/components/schemas/CommitSlimDTO'

    StatisticDTO:
      type: object
      properties:
        statisticId:
          type: integer
          format: int64
          example: 4
        createdDate:
          type: string
          format: date-time
        statisticType:
          $ref: '#/components/schemas/StatisticTypeSlimDTO'
        author:
          $ref: '#/components/schemas/UserSlimDTO'
        project:
          $ref: '#/components/schemas/ProjectSlimDTO'
        pathToFileWithGeneratedStat:
          type: string
          example: /somePath

    StatisticTypeDTO:
      type: object
      properties:
        statisticName:
          type: string
          example: Best employees
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/StatisticSlimDTO'

    RoleDTO:
      type: object
      properties:
        roleName:
          type: string
          example: ROLE_ADMIN
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserSlimDTO'

    RepositoryUpdateDTO:
      type: object
      properties:
        repository:
          $ref: '#/components/schemas/RepositorySlimDTO'
        repositoryName:
          type: string
        repositoryURL:
          type: string
        project:
          $ref: '#/components/schemas/ProjectSlimDTO'

    RepositoryDTO:
      type: object
      properties:
        repositoryId:
          type: integer
          format: int64
          example: 1
        repositoryName:
          type: string
          example: Some name
        repositoryURL:
          type: string
          example: githubUsername/repositoryName
        project:
          $ref: '#/components/schemas/ProjectSlimDTO'

    ProjectDTO:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
          example: 13
        createdDate:
          type: string
          format: date-time
        projectName:
          type: string
          example: Some Name
        description:
          type: string
          example: My first project...
        author:
          $ref: '#/components/schemas/UserSlimDTO'
        repositories:
          type: array
          items:
            $ref: '#/components/schemas/RepositorySlimDTO'
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/StatisticSlimDTO'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserSlimDTO'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagSlimDTO'

    CommitDTO:
      type: object
      properties:
        commitId:
          type: integer
          format: int64
          example: 228
        createdDate:
          type: string
          format: date-time
        hashHubId:
          type: string
          example: 37c2af
        loginAuthor:
          type: string
          example: login
        description:
          type: string
          example: My first commit
        repository:
          $ref: '#/components/schemas/RepositorySlimDTO'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagSlimDTO'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentSlimDTO'
        deleted:
          type: boolean
          example: false

    CommentDTO:
      type: object
      properties:
        commentId:
          type: integer
          format: int64
          example: 1
        text:
          type: string
          example: Good job, Oleg
        createdDate:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/UserSlimDTO'
        authorUsername: ##TODO what is it
          type: string
          example: username
        commit:
          $ref: '#/components/schemas/CommitSlimDTO'
        isEdited:
          type: boolean
          example: false

    CommentSlimDTO:
      type: object
      properties:
        commentId:
          type: integer
          format: int64
          example: 13
        text:
          type: string
          example: Good job, Oleg
        createdDate:
          type: string
          format: date-time
        isEdited:
          type: boolean
          example: false

    CommentUpdateSlimDTO:
      type: object
      properties:
        commentId:
          type: integer
          format: int64
          example: 13
        text:
          type: string
          example: Good job, Oleg

    CommitSlimDTO:
      type: object
      properties:
        commitId:
          type: integer
          format: int64
          example: 13
        createdDate:
          type: string
          format: date-time
        hashHubId:
          type: string
          example: 37c2af
        loginAuthor:
          type: string
          example: login
        description:
          type: string
          example: My first commit

    ProjectSlimDTO:
      type: object
      properties:
        projectId:
          type: integer
          format: int64
          example: 13
        createdDate:
          type: string
          format: date-time
        projectName:
          type: string
          example: Some Name
        description:
          type: string
          example: My first project...

    ProjectUpdateSlimDTO:
      type: object
      properties:
        projectName:
          type: string
          example: Some Name
        description:
          type: string
          example: My first project...

    RepositorySlimDTO:
      type: object
      properties:
        repositoryId:
          type: integer
          format: int64
          example: 13
        repositoryName:
          type: string
          example: Some name
        repositoryURL:
          type: string
          example: githubUsername/githubRepositoryName

    RepositoryUpdateSlimDTO:
      type: object
      properties:
        repositoryId:
          type: integer
          format: int64
          example: 13
        repositoryName:
          type: string
          example: Some name

    TagSlimDTO:
      type: object
      properties:
        tagId:
          type: integer
          format: int64
          example: 13
        tagName:
          type: string
          example: TODO

    StatisticSlimDTO:
      type: object
      properties:
        statisticId:
          type: integer
          format: int64
          example: 13
        createdDate:
          type: string
          format: date-time

    StatisticTypeSlimDTO:
      type: object
      properties:
        statisticName:
          type: string
          example: Graph

    RoleSlimDTO:
      type: object
      properties:
        roleName:
          type: string
          example: ROLE_ADMIN

    UserSlimDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 13
        username:
          type: string
          example: username
        email:
          type: string
          example: email@gmail.com
        profilePhotoURL:
          type: string
          example: localhost:8080/users/26/photo

    PasswordDTO:
      type: object
      properties:
        password:
          type: string
          example: PaSsWoRd123